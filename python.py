# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TyUaQt1aasgAG5sv0YYx_efI70AF4U6C
"""

!pip install gradio

from huggingface_hub import login
login()

import gradio as gr
from huggingface_hub import InferenceClient
from PIL import Image
import os

# Available models
MODELS = {
    "FLUX.1-schnell": "black-forest-labs/FLUX.1-schnell",
    "FLUX.1-dev": "black-forest-labs/FLUX.1-dev",
    "Stable Diffusion 3.5": "stabilityai/stable-diffusion-3.5-large",
    "CogView4-6B": "THUDM/CogView4-6B",
    "Flux-Midjourney-Mix2-LoRA": "strangerzonehf/Flux-Midjourney-Mix2-LoRA"
}

# Hugging Face API token or "stored .env file also"
API_KEY = "secret API token" 

def generate_image(prompt, model_name):
    """Generates an image from the given text prompt using the selected model."""
    client = InferenceClient(token=API_KEY)
    model_id = MODELS[model_name]

    # Generate image
    image = client.text_to_image(prompt, model=model_id)

    # Save image
    image_path = f"output_{model_name.replace(' ', '_')}.png"
    image.save(image_path)

    return image_path

def generate_all_models(prompt):
    """Generates images from all models and returns their paths."""
    images = []
    for model_name in MODELS:
        path = generate_image(prompt, model_name)
        images.append(path)
    return images

def download_image(image_path):
    """Allows users to download the generated image."""
    return image_path

with gr.Blocks() as demo:
    gr.Markdown("# üñºÔ∏è Text-to-Image Generator (Multiple Models)")

    with gr.Row():
        prompt_input = gr.Textbox(label="Enter your prompt", placeholder="Describe your image...")

    with gr.Row():
        model_dropdown = gr.Dropdown(list(MODELS.keys()), label="Select a Model", value=list(MODELS.keys())[0])

    with gr.Row():
        generate_btn = gr.Button("Generate Image")
        generate_all_btn = gr.Button("Generate from All Models")

    with gr.Row():
        image_output = gr.Image(label="Generated Image", type="filepath")

    with gr.Row():
        all_images_output = gr.Gallery(label="All Model Outputs")

    with gr.Row():
        download_btn = gr.File(label="Download Image")

    generate_btn.click(generate_image, inputs=[prompt_input, model_dropdown], outputs=image_output)
    generate_all_btn.click(generate_all_models, inputs=prompt_input, outputs=all_images_output)
    download_btn.change(download_image, inputs=image_output, outputs=download_btn)

if __name__ == "__main__":
    demo.launch()

