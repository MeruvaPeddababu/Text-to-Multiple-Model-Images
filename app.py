# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGM1bJ4IBAtBFDEEmg4yvi2gEPi5O8YF?authuser=1#scrollTo=530iCF22wiAm
"""

!pip install --upgrade diffusers

pip install invisible_watermark transformers accelerate safetensors

pip install --upgrade diffusers transformers scipy





!pip install --upgrade torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

pip install gradio



import torch
import gradio as gr
from diffusers import DiffusionPipeline
from diffusers import StableDiffusionPipeline
from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler

def load_sd_xl():
    pipe = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0",
        torch_dtype=torch.float16,
        use_safetensors=True,
        variant="fp16"
    )
    pipe.to("cuda")
    return pipe
def load_sd_v1_4():
    pipe = StableDiffusionPipeline.from_pretrained(
        "CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16
    )
    pipe.to("cuda")
    return pipe
def load_sd_v2_1():
    pipe = StableDiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-2-1", torch_dtype=torch.float16
    )
    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
    pipe.to("cuda")
    return pipe

def generate_image(model_name, prompt):
    if model_name == "Stable Diffusion XL":
        pipe = load_sd_xl()
    elif model_name == "Stable Diffusion v1.4":
        pipe = load_sd_v1_4()
    elif model_name == "Stable Diffusion v2.1 (DPM-Solver)":
        pipe = load_sd_v2_1()
    else:
        return "Invalid model selection"

    image = pipe(prompt).images[0]  # Generate Image
    return image

models = [
    "Stable Diffusion XL",
    "Stable Diffusion v1.4",
    "Stable Diffusion v2.1 (DPM-Solver)"
]

with gr.Blocks() as demo:
    gr.Markdown("## Stable Diffusion Image Generator ðŸš€")
    gr.Markdown("Select a model, enter a prompt, and generate an AI image!")

    model_dropdown = gr.Dropdown(models, label="Select Model")
    text_input = gr.Textbox(label="Enter your prompt")
    generate_button = gr.Button("Generate Image")
    image_output = gr.Image(label="Generated Image")

    generate_button.click(generate_image, inputs=[model_dropdown, text_input], outputs=image_output)

demo.launch(debug=True)

# Create Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## Stable Diffusion Image Generator ðŸš€")
    gr.Markdown("Select a model, enter a prompt, and generate an AI image!")

    model_dropdown = gr.Dropdown(models.keys(), label="Select Model")
    text_input = gr.Textbox(label="Enter your prompt")
    generate_button = gr.Button("Generate Image")
    image_output = gr.Image(label="Generated Image")

    generate_button.click(generate_image, inputs=[model_dropdown, text_input], outputs=image_output)

demo.launch(debug=True)
